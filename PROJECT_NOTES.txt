Project Notes — 進捗管理アプリ（progress-app）

概要
- 小規模チーム向け「クラス別の進捗とメモ」を管理するWebアプリ。
- 実行環境は Tomcat 9（Servlet 4, javax.*）で動作する WAR。ビューは JSP + JSTL。
- データは MariaDB/MySQL（JNDI DataSource: `jdbc/progress`）に永続化。JNDI未設定時はインメモリ動作。

技術スタック
- 言語/ランタイム: Java 17 / Servlet 4（javax.*）
- ビルド: Maven（`packaging: war`、UTF-8）
- フロント: JSP + JSTL 1.2、シンプルなカードUI（`assets/app.css`, `assets/app.js`）
- DB: MariaDB JDBC（`org.mariadb.jdbc:mariadb-java-client`）
- その他: ヘルスチェック `/healthz`（DBなしでも200返却）

ディレクトリ構成（主なもの）
- `model`: `ClassEntry`（種別`classType`/ピン`classPinned`対応）, `Memo`（詳細/タグ/更新時刻/ピン対応）
- `repository`: 
  - `JdbcStore` … クラス/メモのCRUD、グループ絞り込み/検索、スキーマ後方互換（不足カラム検出時は旧SQLへフォールバック）
  - `InMemoryStore` … インメモリ実装（`seed()`でサンプル投入、クラス⇔メモ関連をMapで保持）
  - `SchemaMissingException` … 必須テーブル欠如時のシグナル
- `web`（サーブレット/フィルタ）:
  - フィルタ: `CharsetFilter`（UTF-8強制）, `AuthFilter`（全ページ保護。assets, `/`, `/index.jsp`, `/login`, `/logout`, `/healthz`を除外。リメンバーCookie対応）
  - 認証: `LoginServlet`（JNDI経由で`users`テーブルあればDB認証、なければ環境変数/デフォルトにフォールバック）, `LogoutServlet`
  - クラス: `ClassListServlet`（/classes 一覧）, `ClassDetailServlet`（/classes/{id} 詳細）, `ClassEditServlet`（/classes/new|edit）
  - 削除: `ClassDeleteServlet`（/class/delete）
  - メモ: `MemoManageServlet`（/memo/new|edit|delete）, `MemoListServlet`（/memos→/classesへリダイレクト）
  - ヘルス: `HealthServlet`（/healthz）
- `webapp`（JSP/静的資産）:
  - `index.jsp`（ログイン/入口）, `list.jsp`（クラス一覧 検索/種別フィルタ/ピン優先）, `detail.jsp`（クラス詳細＋メモ一覧）
  - `class_form.jsp`, `class_delete.jsp`, `memo_form.jsp`, `memo_delete.jsp`
  - `META-INF/context.xml`（ローカル開発用JNDI設定例）, `WEB-INF/web.xml`（フィルタ/セッション設定 等）

主な機能
- ログイン認証（セッション方式）。DB認証が使える場合は優先、不可時は `AUTH_USER`/`AUTH_PASS` もしくは既定（admin/changeit）
- クラス一覧/詳細/作成/編集/削除。カードUI、種別（JSP/サーブレット/Beans）フィルタ、ピン留め（先頭表示）
- メモ作成/編集/削除。クラス詳細画面に一覧表示（タイプ/タイトル/作成・更新/タグ/ピン）
- ヘルスチェック `/healthz`（DB到達可否に応じてメッセージ、HTTP 200）

データ永続化とスキーマ
- 期待スキーマ（新仕様の例）
  - `classes(class_id, class_name, class_created, status, class_type, class_pinned)`
  - `memos(memo_id, memo_type, memo_title, memo_created, memo_detail, memo_updated, memo_tags, memo_pinned)`
  - 関連: `class_memo(class_id, memo_id)`
  - グループ/認証連携（任意）: `group_class`, `users`, `user_group`
- 後方互換: `JdbcStore` は Unknown column / table を検出し、古い列構成向けのSELECT/UPDATEに自動フォールバック
- JNDI例（ローカル）: `META-INF/context.xml` で `jdbc/progress` を `jdbc:mariadb://localhost:3306/taskall?...` に設定

認証
- 優先: JNDI DataSource 経由で `users` テーブルを用いたDB認証（JOINで `user_group` から `GROUP_ID` 付与）
- フォールバック: 環境変数 `AUTH_USER` / `AUTH_PASS` → 既定 `admin` / `changeit`
- リメンバーCookie: `REMEMBER_USER`, `REMEMBER_GID`（1年, HttpOnly）

セッション/セキュリティ
- `web.xml` の `session-timeout` は 0（タイムアウトなし）。`cookie-config` で HttpOnly を有効化
- 本番はHTTPS推奨（リバースプロキシやTomcatコネクタ）。HTTPS運用時はSecure属性の付与を検討

画面とURL（抜粋）
- トップ/ログイン: `/`（index.jsp）, POST `/login`, POST `/logout`
- クラス: GET `/classes`, GET `/classes/{id}`, GET `/classes/new`, GET `/classes/edit?id=`
- クラス削除: GET/POST `/class/delete?id=`
- メモ: GET/POST `/memo/new|edit|delete`（`back` パラメータで戻り先維持）

ビルド/デプロイ
- ビルド: `mvn -q -DskipTests package` → `target/progress-app-0.0.1-SNAPSHOT.war`
- 配置: Tomcat 9 の `webapps/progress-app.war` へ配置（自動展開）
- DB接続: 展開先の `META-INF/context.xml` で `jdbc/progress` を設定（ドライバはアプリ同梱）
- Raspberry Pi 常時稼働: `progress-app/DEPLOY_PI.md` 参照（systemd例、環境変数、ハードニング）

開発メモ/互換性
- Tomcat 10（jakarta.*）では不可。Tomcat 9（javax.*）を使用
- 文字化け（ソースコメント/一部表示に `�` が見える）を確認。ビルド/配備/DBの文字コードをUTF-8に統一すること
- `StoreProvider` がJNDIを試行し、失敗時は `InMemoryStore.seed()` でデモデータを投入

既知の課題 / TODO
- 未実装メソッド: `closeMemo`, `countOpenBugs`（両Store）
- グループ連携機能（`group_class`, `users`, `user_group`）はテーブルが無い環境では無効。DDL整備が必要
- 入力バリデーション/エラーメッセージの強化（フォーム必須チェック、例外時の通知）
- 一覧の検索/フィルタの強化（ページネーション等）
- 本番のCookie `secure`/`SameSite` 対応、リバースプロキシでのHTTPS終端/セキュリティヘッダ追加

クイックスタート（開発用）
1) `src/main/webapp/META-INF/context.xml` のDB接続設定をローカル環境に合わせて修正
2) `mvn -q -DskipTests package` でWAR作成
3) Tomcat 9 にデプロイ（`webapps/progress-app.war`）。必要なら `AUTH_USER`/`AUTH_PASS` を設定
4) ブラウザで `http://localhost:8080/progress-app/` へアクセス

